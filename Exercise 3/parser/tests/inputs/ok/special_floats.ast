(Program) {
    .items = [
        [0] = Func((FuncDef) {
            .return_type = void,
            .ident = "main",
            .params = [],
            .statements = [
                [0] = VarDef((VarDef) {
                    .data_type = float,
                    .res_ident = (ResIdent) {
                        .ident = "pos_inf"
                    },
                    .init = BinaryOp((BinOpExpr) {
                        .op = Div,
                        .lhs = Literal(Float(1)),
                        .rhs = Literal(Int(0))
                    })
                }),
                [1] = VarDef((VarDef) {
                    .data_type = float,
                    .res_ident = (ResIdent) {
                        .ident = "neg_inf"
                    },
                    .init = BinaryOp((BinOpExpr) {
                        .op = Div,
                        .lhs = UnaryMinus(Literal(Float(1))),
                        .rhs = Literal(Int(0))
                    })
                }),
                [2] = VarDef((VarDef) {
                    .data_type = float,
                    .res_ident = (ResIdent) {
                        .ident = "nan"
                    },
                    .init = BinaryOp((BinOpExpr) {
                        .op = Div,
                        .lhs = Literal(Float(0)),
                        .rhs = Literal(Int(0))
                    })
                }),
                [3] = Print((PrintStmt) {
                    .expressions = [
                        [0] = Var((ResIdent) {
                            .ident = "pos_inf"
                        })
                    ]
                }),
                [4] = Print((PrintStmt) {
                    .expressions = [
                        [0] = Var((ResIdent) {
                            .ident = "neg_inf"
                        })
                    ]
                }),
                [5] = Print((PrintStmt) {
                    .expressions = [
                        [0] = Var((ResIdent) {
                            .ident = "nan"
                        })
                    ]
                }),
                [6] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp((BinOpExpr) {
                            .op = Eq,
                            .lhs = Var((ResIdent) {
                                .ident = "nan"
                            }),
                            .rhs = Var((ResIdent) {
                                .ident = "nan"
                            })
                        })
                    ]
                }),
                [7] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp((BinOpExpr) {
                            .op = Neq,
                            .lhs = Var((ResIdent) {
                                .ident = "nan"
                            }),
                            .rhs = Var((ResIdent) {
                                .ident = "nan"
                            })
                        })
                    ]
                }),
                [8] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp((BinOpExpr) {
                            .op = Add,
                            .lhs = Var((ResIdent) {
                                .ident = "pos_inf"
                            }),
                            .rhs = Literal(Int(1))
                        })
                    ]
                }),
                [9] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp((BinOpExpr) {
                            .op = Sub,
                            .lhs = Var((ResIdent) {
                                .ident = "neg_inf"
                            }),
                            .rhs = Literal(Int(1))
                        })
                    ]
                })
            ]
        })
    ]
}
