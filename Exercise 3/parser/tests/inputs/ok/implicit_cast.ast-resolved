(Program) {
    .items = [
        [0] = Func((FuncDef) {
            .return_type = void,
            .ident = "main",
            .params = [],
            .statements = [
                [0] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(bool, (BinOpExpr) {
                            .op = Lt,
                            .lhs = Literal(int, Int(1)),
                            .rhs = Literal(float, Float(1.5))
                        })
                    ]
                }),
                [1] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(bool, (BinOpExpr) {
                            .op = Lt,
                            .lhs = Literal(float, Float(1.5)),
                            .rhs = Literal(int, Int(1))
                        })
                    ]
                }),
                [2] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(bool, (BinOpExpr) {
                            .op = Gt,
                            .lhs = Literal(int, Int(1)),
                            .rhs = Literal(float, Float(1.5))
                        })
                    ]
                }),
                [3] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(bool, (BinOpExpr) {
                            .op = Gt,
                            .lhs = Literal(float, Float(1.5)),
                            .rhs = Literal(int, Int(1))
                        })
                    ]
                }),
                [4] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(bool, (BinOpExpr) {
                            .op = Leq,
                            .lhs = Literal(int, Int(1)),
                            .rhs = Literal(float, Float(1.5))
                        })
                    ]
                }),
                [5] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(bool, (BinOpExpr) {
                            .op = Leq,
                            .lhs = Literal(float, Float(1.5)),
                            .rhs = Literal(int, Int(1))
                        })
                    ]
                }),
                [6] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(bool, (BinOpExpr) {
                            .op = Geq,
                            .lhs = Literal(int, Int(1)),
                            .rhs = Literal(float, Float(1.5))
                        })
                    ]
                }),
                [7] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(bool, (BinOpExpr) {
                            .op = Geq,
                            .lhs = Literal(float, Float(1.5)),
                            .rhs = Literal(int, Int(1))
                        })
                    ]
                }),
                [8] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(bool, (BinOpExpr) {
                            .op = Eq,
                            .lhs = Literal(int, Int(1)),
                            .rhs = Literal(float, Float(1.5))
                        })
                    ]
                }),
                [9] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(bool, (BinOpExpr) {
                            .op = Eq,
                            .lhs = Literal(float, Float(1.5)),
                            .rhs = Literal(int, Int(1))
                        })
                    ]
                }),
                [10] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(bool, (BinOpExpr) {
                            .op = Neq,
                            .lhs = Literal(int, Int(1)),
                            .rhs = Literal(float, Float(1.5))
                        })
                    ]
                }),
                [11] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(bool, (BinOpExpr) {
                            .op = Neq,
                            .lhs = Literal(float, Float(1.5)),
                            .rhs = Literal(int, Int(1))
                        })
                    ]
                }),
                [12] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(float, (BinOpExpr) {
                            .op = Add,
                            .lhs = Literal(int, Int(1)),
                            .rhs = Literal(float, Float(1.5))
                        })
                    ]
                }),
                [13] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(float, (BinOpExpr) {
                            .op = Add,
                            .lhs = Literal(float, Float(1.5)),
                            .rhs = Literal(int, Int(1))
                        })
                    ]
                }),
                [14] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(float, (BinOpExpr) {
                            .op = Sub,
                            .lhs = Literal(int, Int(1)),
                            .rhs = Literal(float, Float(1.5))
                        })
                    ]
                }),
                [15] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(float, (BinOpExpr) {
                            .op = Sub,
                            .lhs = Literal(float, Float(1.5)),
                            .rhs = Literal(int, Int(1))
                        })
                    ]
                }),
                [16] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(float, (BinOpExpr) {
                            .op = Mul,
                            .lhs = Literal(int, Int(1)),
                            .rhs = Literal(float, Float(1.5))
                        })
                    ]
                }),
                [17] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(float, (BinOpExpr) {
                            .op = Mul,
                            .lhs = Literal(float, Float(1.5)),
                            .rhs = Literal(int, Int(1))
                        })
                    ]
                }),
                [18] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(float, (BinOpExpr) {
                            .op = Div,
                            .lhs = Literal(int, Int(1)),
                            .rhs = Literal(float, Float(1.5))
                        })
                    ]
                }),
                [19] = Print((PrintStmt) {
                    .expressions = [
                        [0] = BinaryOp(float, (BinOpExpr) {
                            .op = Div,
                            .lhs = Literal(float, Float(1.5)),
                            .rhs = Literal(int, Int(1))
                        })
                    ]
                })
            ]
        })
    ]
}
(SymDefTable) {
    .main_func = (DefId) 0,
    .global_count = 0,
    .definitions = [
        [0] = Func("main", (FuncInfo) {
            .item_id = (ItemId) 0,
            .return_type = void,
            .param_count = 0,
            .local_vars = []
        })
    ]
}
